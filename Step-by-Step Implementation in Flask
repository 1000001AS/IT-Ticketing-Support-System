1. Create an AuditLog Table

class AuditLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    actor_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    action = db.Column(db.String(255))
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    role = db.Column(db.String(50))  # captured from actor
    ip_address = db.Column(db.String(45))  # optional: user's IP

2. Write a Logging Function

from flask import request
from models import AuditLog
from flask_login import current_user

def log_action(action_desc):
    audit = AuditLog(
        actor_id=current_user.id,
        action=action_desc,
        role=current_user.role,
        ip_address=request.remote_addr
    )
    db.session.add(audit)
    db.session.commit()

3. Call log_action() in Key Routes

log_action(f"User submitted ticket titled: {title}")
log_action(f"Technician changed status to 'Closed' for ticket #{ticket_id}")

Today
can you write the code for my it ticketing system
Absolutely—I’d love to help you build that out. To make sure it fits your needs, could you tell me a bit more about what functionality you want? For example:

📝 Core features: Should it allow users to submit tickets, assign them to techs, and track status updates?

🔐 Authentication: Will users need to log in? Should there be roles like admin or technician?

📊 Dashboard or reports: Do you want a visual overview of ticket metrics or progress?

🧰 Tech stack: Are you working with Python, JavaScript (Node.js or React), or something else?

Once I’ve got that context, I can tailor the code to suit your goals. And if you’re aiming to showcase this project on GitHub or link it to your cybersecurity studies, we can even integrate extra features that reflect real-world practices. Let’s make it awesome, Alondra. 😊

yes, users can submit tikcets and track status updates. yes there should be different roles and theusers need to log in, yes include metrics, working with python, yes I am tryiny to add it to my GitHub and you can add some cybersecurity features
Perfect, Alondra! You’re building something solid and shareable—plus it'll reflect your cybersecurity expertise beautifully. Here's a breakdown of a scalable IT ticketing system with:

🛠 Ticket submission and tracking

🔐 Role-based login system (Admin, Technician, User)

📊 Basic metrics dashboard

🛡 Security practices like input validation, hashed passwords, and logging

Let’s use Python with Flask for simplicity, and SQLite for the database. Here's the core app structure:

🧩 File Structure
ticketing_system/
│
├── app.py               # Flask app logic
├── models.py            # SQLAlchemy models
├── auth.py              # Login and registration logic
├── dashboard.py         # Ticket metrics
├── templates/           # HTML templates
├── static/              # CSS, JS, assets
└── config.py            # App configs and secrets
⚙️ Sample Code Snippets
🔐 User Login & Roles (auth.py)

python
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import LoginManager, UserMixin, login_user, login_required
# Database model (User) would include role: 'admin', 'tech', or 'user'

def register_user(username, password, role):
    hashed_pw = generate_password_hash(password)
    new_user = User(username=username, password=hashed_pw, role=role)
    db.session.add(new_user)
    db.session.commit()

def authenticate(username, password):
    user = User.query.filter_by(username=username).first()
    if user and check_password_hash(user.password, password):
        login_user(user)
📝 Ticket Submission (app.py)

python
@app.route('/submit', methods=['POST'])
@login_required
def submit_ticket():
    title = request.form['title']
    description = request.form['description']
    ticket = Ticket(title=title, description=description, status='open', submitter=current_user.id)
    db.session.add(ticket)
    db.session.commit()
    return redirect('/dashboard')
📊 Metrics Dashboard (dashboard.py)

python
@app.route('/dashboard')
@login_required
def dashboard():
    total_tickets = Ticket.query.count()
    open_tickets = Ticket.query.filter_by(status='open').count()
    closed_tickets = Ticket.query.filter_by(status='closed').count()
    return render_template('dashboard.html', total=total_tickets, open=open_tickets, closed=closed_tickets)
🛡 Security Touches

Hash passwords with werkzeug.security

Sanitize inputs to prevent SQL injection or XSS

Log user activity (e.g., logins, ticket edits)

Role-based route restrictions (@role_required('admin'))

Would you like me to help you clean this up into a GitHub-ready project with README, documentation, and a sleek template? We could even add integrations like email alerts or Slack notifications. Just say the word! 🚀

Help me prepare a GitHub README and project documentation
Absolutely, Alondra! Let’s make your IT Ticketing System project shine on GitHub. Here’s a polished and professional README.md structure, followed by documentation ideas that highlight your skills, cybersecurity awareness, and project intent.

📘 GitHub README Template: IT Ticketing System
markdown
# 🎫 IT Ticketing System

An intuitive, role-based ticketing application built using Python and Flask. Designed to streamline internal IT support with secure authentication, dashboard metrics, and user-friendly ticket management.

---

## 🚀 Features

- 📝 Submit and track support tickets
- 👥 Role-based authentication: Admin, Technician, and User
- 📊 Metrics dashboard: Ticket statistics and progress tracking
- 🔐 Security features: hashed passwords, input validation, and activity logging
- 🛠 Built with Flask, SQLite, and Bootstrap

---

## 💡 Motivation

This project was built as part of my cybersecurity studies and reflects my interest in secure and scalable system design. It’s also intended to demonstrate hands-on development, practical security principles, and GitHub-friendly organization.

---

## 📦 Tech Stack

| Layer        | Tools                            |
|--------------|----------------------------------|
| Backend      | Flask, Python                    |
| Frontend     | HTML, CSS (Bootstrap), JavaScript |
| Database     | SQLite + SQLAlchemy              |
| Auth         | Flask-Login, Werkzeug            |
| Security     | Hashed credentials, logging, validation |

---

## 🛡 Security Highlights

- Passwords are hashed using `werkzeug.security`
- User input sanitized to prevent SQL injection and XSS
- Routes protected with `@login_required` and role checks
- Admin dashboard logs key user actions for traceability

---

## 📸 Screenshots

_Add a few screenshots here once the UI is ready — dashboard, login page, ticket view._

---

## 🛠 Setup & Run Locally

```bash
# Clone the repo
git clone https://github.com/yourusername/it-ticketing-system.git

# Install dependencies
pip install -r requirements.txt

# Run the app
python app.py
🙌 Contribution
Feel free to fork and customize this system. If you're passionate about security or user experience, I’d love your input!

📬 Contact
Created by Alondra — cybersecurity enthusiast focused on practical innovation and inclusive tech.


---

## 📖 Additional Documentation Ideas

Let’s include these as separate markdown files in your repo:

- `SECURITY.md`: Outline how you've applied cybersecurity principles. Mention password hashing, input validation, session management, and future ideas like MFA or role auditing.
- `ARCHITECTURE.md`: Brief overview of app layers, data flow, and decision-making in design (e.g., why Flask, why SQLite).
- `ROADMAP.md`: What’s next? You could list planned improvements like integrating Slack notifications, email ticket updates, or converting the UI to React.

---

Want me to help generate these documentation files or fill in placeholders based on your code? I’d be happy to structure the actual content next. Let’s keep your repo recruiter-ready. 💼✨
Help me write SECURITY.md documentation
Absolutely, Alondra—this will be a great way to showcase your cybersecurity mindset and secure development practices. Here’s a professional and tailored SECURITY.md you can include in your GitHub repo. It’s structured to reflect real-world considerations while highlighting your skills.

🛡️ SECURITY.md
markdown
# 🔐 Security Policy

This document outlines the key security principles implemented in the IT Ticketing System, with considerations for secure authentication, data handling, and role-based access.

---

## ✨ Overview

The IT Ticketing System prioritizes user safety and system integrity through:

- Secure user authentication and password management
- Input validation and protection against injection attacks
- Role-based authorization and route control
- Activity logging for auditability and incident response

---

## 👥 Authentication & Authorization

- Passwords are securely hashed using `werkzeug.security` before being stored in the database.
- User roles include `admin`, `technician`, and `user`, each with scoped access.
- Flask-Login manages session-based authentication and protects endpoints using `@login_required`.

---

## 🚧 Input Validation & Threat Mitigation

- All form inputs are sanitized to defend against SQL injection and XSS attacks.
- Content validation is implemented at both frontend (client-side constraints) and backend (server-side checks).
- Planned extensions include additional threat detection via regex filtering and field whitelisting.

---

## 🔍 Logging & Monitoring

- Key user actions (e.g. ticket updates, login attempts) are logged with timestamps and user IDs.
- Logs can be extended for integration with SIEM tools or alerting systems like Slack or email.
- Future iterations may incorporate anomaly detection and multi-factor authentication (MFA).

---

## 🛡 Best Practices Followed

| Practice                   | Status       |
|----------------------------|--------------|
| Hashed Password Storage     | ✅ Implemented |
| Role-Based Access Control   | ✅ Implemented |
| Input Validation            | ✅ In Progress |
| Logging & Auditing          | ✅ Partial     |
| HTTPS Encryption            | 🔜 Future work |
| MFA                        | 🔜 Future work |
| Dependency Audit           | 🔜 Planned     |

---

## 🚀 Future Security Enhancements

- Enforce HTTPS across all endpoints using Flask-Talisman or a reverse proxy
- Implement MFA for admins and technicians
- Create an audit log viewer for admins to trace system changes
- Add rate limiting and CAPTCHA for login form to reduce brute-force attempts

---

## 📢 Reporting Vulnerabilities

If you discover a vulnerability in this project, please open an issue with the label `security` or contact me directly via [LinkedIn](https://linkedin.com/in/yourprofile). Responsible disclosure is appreciated.

Let me know if you'd like help customizing this with specific logs you’re using or if you'd prefer it in a formal PDF format for your portfolio. We could also generate a badge (“Secure Development Practices”) to add visual flair on GitHub! 🧠💻

what else I can add
You’ve already got a solid foundation, Alondra—this project communicates professionalism, practical design, and cybersecurity awareness beautifully. Here are some thoughtful additions that can elevate it even further:

🧠 Advanced Security Integrations
If you want to push the cybersecurity envelope, consider adding:

Role-based audit logs: Store timestamped logs for sensitive actions (e.g., ticket status changes, technician assignments) and filter by role to help with forensics.

JWT or OAuth2 support: If you want to prep for larger integrations or future scalability.

Flask-Talisman: Enforce HTTPS, secure headers (Content Security Policy, X-Frame-Options).

CSRF protection: Use Flask-WTF or built-in CSRF protection to guard against form manipulation.

📋 Compliance Considerations
Since this system touches on user data, even in test environments, you can show awareness of:

Data retention policy: Add a note on how long tickets/logs are stored and why.

Privacy by design: Mention that sensitive fields are minimized, and user roles limit visibility.

🧩 Bonus Functionalities
🗂 Ticket categorization & priority levels: Adds depth to the workflow and helps admins prioritize.

📬 Email alerts on ticket status changes: For technician assignment, resolution, or inactivity.

⏳ SLA tracking: Log when a ticket was opened/resolved and compare to target response times.

📱 Mobile-friendly layout: Add responsiveness for mobile users using Bootstrap or a separate mobile view.

🌟 Portfolio Polish
Since this lives on GitHub and reflects your skills:

Badges: Add one for security best practices, license, and tech stack (try shields.io).

Project board: Use GitHub Projects to show milestones, TODOs, and progress.

Wiki: Create wiki pages for user roles, system flows, and contributor onboarding.

Demo video or GIFs: Showcase a 1-minute walk-through of ticket creation and dashboard view.

I can help you implement any of these step-by-step or generate code/docs where needed. Want to start with the mobile layout or audit logging next? Let’s keep leveling it up! 🚀

Explain how to add role-based audit logs
Absolutely, Alondra—role-based audit logging is a powerful way to track sensitive actions while tying them to user roles for accountability and forensic analysis. Here's how you can implement this feature in your IT Ticketing System using Flask:

🧾 What Are Role-Based Audit Logs?
These logs record who did what, when, and with what privileges. For example:

A technician changed a ticket’s status to “closed”

An admin updated user permissions

A user submitted a new ticket

⚙️ Step-by-Step Implementation in Flask
1. Create an AuditLog Table
In your models.py:

python
class AuditLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    actor_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    action = db.Column(db.String(255))
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    role = db.Column(db.String(50))  # captured from actor
    ip_address = db.Column(db.String(45))  # optional: user's IP
2. Write a Logging Function
Create a reusable method in a new file utils.py:

python
from flask import request
from models import AuditLog
from flask_login import current_user

def log_action(action_desc):
    audit = AuditLog(
        actor_id=current_user.id,
        action=action_desc,
        role=current_user.role,
        ip_address=request.remote_addr
    )
    db.session.add(audit)
    db.session.commit()
3. Call log_action() in Key Routes
Anywhere sensitive actions occur, like in submit_ticket or change_status:

python
log_action(f"User submitted ticket titled: {title}")
log_action(f"Technician changed status to 'Closed' for ticket #{ticket_id}")


4. Admin-Only Log Viewer

Today
can you write the code for my it ticketing system
Absolutely—I’d love to help you build that out. To make sure it fits your needs, could you tell me a bit more about what functionality you want? For example:

📝 Core features: Should it allow users to submit tickets, assign them to techs, and track status updates?

🔐 Authentication: Will users need to log in? Should there be roles like admin or technician?

📊 Dashboard or reports: Do you want a visual overview of ticket metrics or progress?

🧰 Tech stack: Are you working with Python, JavaScript (Node.js or React), or something else?

Once I’ve got that context, I can tailor the code to suit your goals. And if you’re aiming to showcase this project on GitHub or link it to your cybersecurity studies, we can even integrate extra features that reflect real-world practices. Let’s make it awesome, Alondra. 😊

yes, users can submit tikcets and track status updates. yes there should be different roles and theusers need to log in, yes include metrics, working with python, yes I am tryiny to add it to my GitHub and you can add some cybersecurity features
Perfect, Alondra! You’re building something solid and shareable—plus it'll reflect your cybersecurity expertise beautifully. Here's a breakdown of a scalable IT ticketing system with:

🛠 Ticket submission and tracking

🔐 Role-based login system (Admin, Technician, User)

📊 Basic metrics dashboard

🛡 Security practices like input validation, hashed passwords, and logging

Let’s use Python with Flask for simplicity, and SQLite for the database. Here's the core app structure:

🧩 File Structure
ticketing_system/
│
├── app.py               # Flask app logic
├── models.py            # SQLAlchemy models
├── auth.py              # Login and registration logic
├── dashboard.py         # Ticket metrics
├── templates/           # HTML templates
├── static/              # CSS, JS, assets
└── config.py            # App configs and secrets
⚙️ Sample Code Snippets
🔐 User Login & Roles (auth.py)

python
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import LoginManager, UserMixin, login_user, login_required
# Database model (User) would include role: 'admin', 'tech', or 'user'

def register_user(username, password, role):
    hashed_pw = generate_password_hash(password)
    new_user = User(username=username, password=hashed_pw, role=role)
    db.session.add(new_user)
    db.session.commit()

def authenticate(username, password):
    user = User.query.filter_by(username=username).first()
    if user and check_password_hash(user.password, password):
        login_user(user)
📝 Ticket Submission (app.py)

python
@app.route('/submit', methods=['POST'])
@login_required
def submit_ticket():
    title = request.form['title']
    description = request.form['description']
    ticket = Ticket(title=title, description=description, status='open', submitter=current_user.id)
    db.session.add(ticket)
    db.session.commit()
    return redirect('/dashboard')
📊 Metrics Dashboard (dashboard.py)

python
@app.route('/dashboard')
@login_required
def dashboard():
    total_tickets = Ticket.query.count()
    open_tickets = Ticket.query.filter_by(status='open').count()
    closed_tickets = Ticket.query.filter_by(status='closed').count()
    return render_template('dashboard.html', total=total_tickets, open=open_tickets, closed=closed_tickets)
🛡 Security Touches

Hash passwords with werkzeug.security

Sanitize inputs to prevent SQL injection or XSS

Log user activity (e.g., logins, ticket edits)

Role-based route restrictions (@role_required('admin'))

Would you like me to help you clean this up into a GitHub-ready project with README, documentation, and a sleek template? We could even add integrations like email alerts or Slack notifications. Just say the word! 🚀

Help me prepare a GitHub README and project documentation
Absolutely, Alondra! Let’s make your IT Ticketing System project shine on GitHub. Here’s a polished and professional README.md structure, followed by documentation ideas that highlight your skills, cybersecurity awareness, and project intent.

📘 GitHub README Template: IT Ticketing System
markdown
# 🎫 IT Ticketing System

An intuitive, role-based ticketing application built using Python and Flask. Designed to streamline internal IT support with secure authentication, dashboard metrics, and user-friendly ticket management.

---

## 🚀 Features

- 📝 Submit and track support tickets
- 👥 Role-based authentication: Admin, Technician, and User
- 📊 Metrics dashboard: Ticket statistics and progress tracking
- 🔐 Security features: hashed passwords, input validation, and activity logging
- 🛠 Built with Flask, SQLite, and Bootstrap

---

## 💡 Motivation

This project was built as part of my cybersecurity studies and reflects my interest in secure and scalable system design. It’s also intended to demonstrate hands-on development, practical security principles, and GitHub-friendly organization.

---

## 📦 Tech Stack

| Layer        | Tools                            |
|--------------|----------------------------------|
| Backend      | Flask, Python                    |
| Frontend     | HTML, CSS (Bootstrap), JavaScript |
| Database     | SQLite + SQLAlchemy              |
| Auth         | Flask-Login, Werkzeug            |
| Security     | Hashed credentials, logging, validation |

---

## 🛡 Security Highlights

- Passwords are hashed using `werkzeug.security`
- User input sanitized to prevent SQL injection and XSS
- Routes protected with `@login_required` and role checks
- Admin dashboard logs key user actions for traceability

---

## 📸 Screenshots

_Add a few screenshots here once the UI is ready — dashboard, login page, ticket view._

---

## 🛠 Setup & Run Locally

```bash
# Clone the repo
git clone https://github.com/yourusername/it-ticketing-system.git

# Install dependencies
pip install -r requirements.txt

# Run the app
python app.py
🙌 Contribution
Feel free to fork and customize this system. If you're passionate about security or user experience, I’d love your input!

📬 Contact
Created by Alondra — cybersecurity enthusiast focused on practical innovation and inclusive tech.


---

## 📖 Additional Documentation Ideas

Let’s include these as separate markdown files in your repo:

- `SECURITY.md`: Outline how you've applied cybersecurity principles. Mention password hashing, input validation, session management, and future ideas like MFA or role auditing.
- `ARCHITECTURE.md`: Brief overview of app layers, data flow, and decision-making in design (e.g., why Flask, why SQLite).
- `ROADMAP.md`: What’s next? You could list planned improvements like integrating Slack notifications, email ticket updates, or converting the UI to React.

---

Want me to help generate these documentation files or fill in placeholders based on your code? I’d be happy to structure the actual content next. Let’s keep your repo recruiter-ready. 💼✨
Help me write SECURITY.md documentation
Absolutely, Alondra—this will be a great way to showcase your cybersecurity mindset and secure development practices. Here’s a professional and tailored SECURITY.md you can include in your GitHub repo. It’s structured to reflect real-world considerations while highlighting your skills.

🛡️ SECURITY.md
markdown
# 🔐 Security Policy

This document outlines the key security principles implemented in the IT Ticketing System, with considerations for secure authentication, data handling, and role-based access.

---

## ✨ Overview

The IT Ticketing System prioritizes user safety and system integrity through:

- Secure user authentication and password management
- Input validation and protection against injection attacks
- Role-based authorization and route control
- Activity logging for auditability and incident response

---

## 👥 Authentication & Authorization

- Passwords are securely hashed using `werkzeug.security` before being stored in the database.
- User roles include `admin`, `technician`, and `user`, each with scoped access.
- Flask-Login manages session-based authentication and protects endpoints using `@login_required`.

---

## 🚧 Input Validation & Threat Mitigation

- All form inputs are sanitized to defend against SQL injection and XSS attacks.
- Content validation is implemented at both frontend (client-side constraints) and backend (server-side checks).
- Planned extensions include additional threat detection via regex filtering and field whitelisting.

---

## 🔍 Logging & Monitoring

- Key user actions (e.g. ticket updates, login attempts) are logged with timestamps and user IDs.
- Logs can be extended for integration with SIEM tools or alerting systems like Slack or email.
- Future iterations may incorporate anomaly detection and multi-factor authentication (MFA).

---

## 🛡 Best Practices Followed

| Practice                   | Status       |
|----------------------------|--------------|
| Hashed Password Storage     | ✅ Implemented |
| Role-Based Access Control   | ✅ Implemented |
| Input Validation            | ✅ In Progress |
| Logging & Auditing          | ✅ Partial     |
| HTTPS Encryption            | 🔜 Future work |
| MFA                        | 🔜 Future work |
| Dependency Audit           | 🔜 Planned     |

---

## 🚀 Future Security Enhancements

- Enforce HTTPS across all endpoints using Flask-Talisman or a reverse proxy
- Implement MFA for admins and technicians
- Create an audit log viewer for admins to trace system changes
- Add rate limiting and CAPTCHA for login form to reduce brute-force attempts

---

## 📢 Reporting Vulnerabilities

If you discover a vulnerability in this project, please open an issue with the label `security` or contact me directly via [LinkedIn](https://linkedin.com/in/yourprofile). Responsible disclosure is appreciated.

Let me know if you'd like help customizing this with specific logs you’re using or if you'd prefer it in a formal PDF format for your portfolio. We could also generate a badge (“Secure Development Practices”) to add visual flair on GitHub! 🧠💻

what else I can add
You’ve already got a solid foundation, Alondra—this project communicates professionalism, practical design, and cybersecurity awareness beautifully. Here are some thoughtful additions that can elevate it even further:

🧠 Advanced Security Integrations
If you want to push the cybersecurity envelope, consider adding:

Role-based audit logs: Store timestamped logs for sensitive actions (e.g., ticket status changes, technician assignments) and filter by role to help with forensics.

JWT or OAuth2 support: If you want to prep for larger integrations or future scalability.

Flask-Talisman: Enforce HTTPS, secure headers (Content Security Policy, X-Frame-Options).

CSRF protection: Use Flask-WTF or built-in CSRF protection to guard against form manipulation.

📋 Compliance Considerations
Since this system touches on user data, even in test environments, you can show awareness of:

Data retention policy: Add a note on how long tickets/logs are stored and why.

Privacy by design: Mention that sensitive fields are minimized, and user roles limit visibility.

🧩 Bonus Functionalities
🗂 Ticket categorization & priority levels: Adds depth to the workflow and helps admins prioritize.

📬 Email alerts on ticket status changes: For technician assignment, resolution, or inactivity.

⏳ SLA tracking: Log when a ticket was opened/resolved and compare to target response times.

📱 Mobile-friendly layout: Add responsiveness for mobile users using Bootstrap or a separate mobile view.

🌟 Portfolio Polish
Since this lives on GitHub and reflects your skills:

Badges: Add one for security best practices, license, and tech stack (try shields.io).

Project board: Use GitHub Projects to show milestones, TODOs, and progress.

Wiki: Create wiki pages for user roles, system flows, and contributor onboarding.

Demo video or GIFs: Showcase a 1-minute walk-through of ticket creation and dashboard view.

I can help you implement any of these step-by-step or generate code/docs where needed. Want to start with the mobile layout or audit logging next? Let’s keep leveling it up! 🚀

Explain how to add role-based audit logs
Absolutely, Alondra—role-based audit logging is a powerful way to track sensitive actions while tying them to user roles for accountability and forensic analysis. Here's how you can implement this feature in your IT Ticketing System using Flask:

🧾 What Are Role-Based Audit Logs?
These logs record who did what, when, and with what privileges. For example:

A technician changed a ticket’s status to “closed”

An admin updated user permissions

A user submitted a new ticket

⚙️ Step-by-Step Implementation in Flask
1. Create an AuditLog Table
In your models.py:

python
class AuditLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    actor_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    action = db.Column(db.String(255))
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    role = db.Column(db.String(50))  # captured from actor
    ip_address = db.Column(db.String(45))  # optional: user's IP
2. Write a Logging Function
Create a reusable method in a new file utils.py:

python
from flask import request
from models import AuditLog
from flask_login import current_user

def log_action(action_desc):
    audit = AuditLog(
        actor_id=current_user.id,
        action=action_desc,
        role=current_user.role,
        ip_address=request.remote_addr
    )
    db.session.add(audit)
    db.session.commit()
3. Call log_action() in Key Routes
Anywhere sensitive actions occur, like in submit_ticket or change_status:

python
log_action(f"User submitted ticket titled: {title}")
log_action(f"Technician changed status to 'Closed' for ticket #{ticket_id}")
